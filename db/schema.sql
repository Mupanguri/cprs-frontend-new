-- Users table
CREATE TABLE IF NOT EXISTS Users (
  userId SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  passwordHash VARCHAR(255),
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User roles table
CREATE TABLE IF NOT EXISTS UserRoles (
  roleId SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES Users(userId) ON DELETE CASCADE,
  role VARCHAR(50) NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(userId, role)
);

CREATE INDEX IF NOT EXISTS UserRoles_userId_idx ON UserRoles (userId);

-- Guilds table
CREATE TABLE IF NOT EXISTS Guilds (
  guildId SERIAL PRIMARY KEY,
  guildName VARCHAR(255) UNIQUE NOT NULL,
  description TEXT,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User guilds table
CREATE TABLE IF NOT EXISTS UserGuilds (
  userGuildId SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES Users(userId) ON DELETE CASCADE,
  guildId INTEGER REFERENCES Guilds(guildId) ON DELETE CASCADE,
  joinedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(userId, guildId)
);

CREATE INDEX IF NOT EXISTS UserGuilds_userId_idx ON UserGuilds (userId);
CREATE INDEX IF NOT EXISTS UserGuilds_guildId_idx ON UserGuilds (guildId);

-- Fees table
CREATE TABLE IF NOT EXISTS Fees (
  feeId SERIAL PRIMARY KEY,
  guildId INTEGER REFERENCES Guilds(guildId) ON DELETE CASCADE,
  description VARCHAR(255) NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  frequency VARCHAR(50) NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS Fees_guildId_idx ON Fees (guildId);

-- Payments table
CREATE TABLE IF NOT EXISTS Payments (
  paymentId SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES Users(userId) ON DELETE CASCADE,
  feeId INTEGER REFERENCES Fees(feeId) ON DELETE CASCADE,
  amountPaid DECIMAL(10, 2) NOT NULL,
  paymentDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  receiptNumber VARCHAR(100),
  paymentMethod VARCHAR(50),
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS Payments_userId_idx ON Payments (userId);
CREATE INDEX IF NOT EXISTS Payments_feeId_idx ON Payments (feeId);

-- Documents table
CREATE TABLE IF NOT EXISTS Documents (
  documentId SERIAL PRIMARY KEY,
  guildId INTEGER REFERENCES Guilds(guildId) ON DELETE SET NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  fileUrl TEXT NOT NULL,
  fileType VARCHAR(50) NOT NULL,
  fileSize INTEGER NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS Documents_guildId_idx ON Documents (guildId);

-- Family census table
CREATE TABLE IF NOT EXISTS FamilyCensus (
  censusId SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES Users(userId) ON DELETE CASCADE UNIQUE,
  title VARCHAR(20),
  firstName VARCHAR(100) NOT NULL,
  middleName VARCHAR(100),
  surname VARCHAR(100) NOT NULL,
  gender VARCHAR(20),
  dateOfBirth DATE,
  maritalStatus VARCHAR(50),
  typeOfMarriage VARCHAR(50),
  placeOfMarriage VARCHAR(255),
  marriageNumber VARCHAR(50),
  marriedTo VARCHAR(255),
  address TEXT,
  phoneCellNumber VARCHAR(50),
  sectionName VARCHAR(100),
  emailAddress VARCHAR(255) NOT NULL,
  placeOfBaptism VARCHAR(255),
  baptismNumber VARCHAR(50),
  groupsGuild VARCHAR(100),
  occupation VARCHAR(100),
  skills TEXT,
  profession VARCHAR(100),
  churchSupportCard VARCHAR(50),
  lastPaid DATE,
  anyOtherComments TEXT,
  dateOfSubmission TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS FamilyCensus_userId_idx ON FamilyCensus (userId);

-- OTP codes table
CREATE TABLE IF NOT EXISTS OtpCodes (
  otpId SERIAL PRIMARY KEY,
  email VARCHAR(255) NOT NULL,
  otp VARCHAR(10) NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expiresAt TIMESTAMP NOT NULL
);

-- Password setup tokens table
CREATE TABLE IF NOT EXISTS PasswordSetupTokens (
  passwordSetupTokenId SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES Users(userId) ON DELETE CASCADE NOT NULL,
  token VARCHAR(255) NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expiresAt TIMESTAMP NOT NULL
);

CREATE INDEX IF NOT EXISTS PasswordSetupTokens_userId_idx ON PasswordSetupTokens (userId);
